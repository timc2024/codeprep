

# File: data\database.py
```
from pymongo import MongoClient
from bson import ObjectId
from config import MONGODB_URI

class Database:
    def __init__(self):
        self.client = MongoClient(MONGODB_URI)
        self.db = self.client['prompt']
        self.prompts_collection = self.db['prompt']

    def get_all_prompts(self):
        return list(self.prompts_collection.find())

    def get_prompt(self, prompt_id):
        return self.prompts_collection.find_one({'_id': ObjectId(prompt_id)})

    def add_prompt(self, tag, content):
        return self.prompts_collection.insert_one({
            'tag': tag,
            'content': content
        }).inserted_id

    def update_prompt(self, prompt_id, tag, content):
        self.prompts_collection.update_one(
            {'_id': ObjectId(prompt_id)},
            {'$set': {'tag': tag, 'content': content}}
        )

    def delete_prompt(self, prompt_id):
        self.prompts_collection.delete_one({'_id': ObjectId(prompt_id)})

db = Database()
```


# File: ui\animated_button.py
```
from PyQt6.QtWidgets import QPushButton
from PyQt6.QtCore import QPropertyAnimation, QEasingCurve, QSize

class AnimatedButton(QPushButton):
    def __init__(self, text, icon=None):
        super().__init__(text)
        self.setStyleSheet("""
            QPushButton {
                background-color: #61afef;
                color: #282c34;
                border: none;
                padding: 12px;
                border-radius: 6px;
                font-size: 16px;
                font-weight: bold;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #56b6c2;
            }
        """)
        if icon:
            self.setIcon(qta.icon(icon, color='#282c34'))
            self.setIconSize(QSize(24, 24))
        self.setText("  " + text)  # Add spacing between icon and text
        self.animation = QPropertyAnimation(self, b"geometry")
        self.animation.setEasingCurve(QEasingCurve.Type.OutQuad)
        self.animation.setDuration(100)

    def enterEvent(self, event):
        self.animation.setStartValue(self.geometry())
        self.animation.setEndValue(self.geometry().adjusted(-2, -2, 2, 2))
        self.animation.start()
        super().enterEvent(event)

    def leaveEvent(self, event):
        self.animation.setStartValue(self.geometry())
        self.animation.setEndValue(self.geometry().adjusted(2, 2, -2, -2))
        self.animation.start()
        super().leaveEvent(event)
```


# File: ui\animated_combo_box.py
```
from PyQt6.QtWidgets import QComboBox
from PyQt6.QtCore import QPropertyAnimation, QEasingCurve, QPoint, Qt, pyqtProperty
from PyQt6.QtGui import QPainter, QColor, QPen, QPolygon

class AnimatedComboBox(QComboBox):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._arrow_rotation = 0
        self._animation = QPropertyAnimation(self, b"arrowRotation")
        self._animation.setDuration(200)
        self._animation.setEasingCurve(QEasingCurve.Type.InOutCubic)
        
        # Add some padding and set a modern style
        self.setStyleSheet("""
            QComboBox {
                padding: 5px 30px 5px 10px;
                border: 1px solid #abb2bf;
                border-radius: 4px;
                background-color: #282c34;
                color: #abb2bf;
            }
            QComboBox::drop-down {
                border: none;
            }
        """)

    def showPopup(self):
        self._animation.setEndValue(180)
        self._animation.start()
        super().showPopup()

    def hidePopup(self):
        self._animation.setEndValue(0)
        self._animation.start()
        super().hidePopup()

    def paintEvent(self, event):
        super().paintEvent(event)
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)

        # Draw the arrow
        arrow_size = 8
        arrow_x = self.width() - arrow_size - 15  # Increased padding
        arrow_y = (self.height() - arrow_size) // 2

        painter.save()
        painter.translate(arrow_x + arrow_size / 2, arrow_y + arrow_size / 2)
        painter.rotate(self._arrow_rotation)
        painter.translate(-arrow_size / 2, -arrow_size / 2)

        arrow = QPolygon([
            QPoint(0, 0),
            QPoint(arrow_size, 0),
            QPoint(arrow_size // 2, arrow_size // 2)
        ])

        painter.setPen(QPen(QColor("#abb2bf"), 1.5))  # Slightly thinner line
        painter.setBrush(QColor("#abb2bf"))
        painter.drawPolygon(arrow)
        painter.restore()

    def get_arrow_rotation(self):
        return self._arrow_rotation

    def set_arrow_rotation(self, value):
        self._arrow_rotation = value
        self.update()

    arrowRotation = pyqtProperty(float, get_arrow_rotation, set_arrow_rotation)
```


# File: ui\file_list_widget.py
```
from PyQt6.QtWidgets import QListWidget, QAbstractItemView, QMessageBox
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QDropEvent, QDragEnterEvent, QDragMoveEvent, QKeyEvent

class FileListWidget(QListWidget):
    def __init__(self):
        super().__init__()
        self.setAcceptDrops(True)
        self.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)
        self.current_language = "Python"
        self.language_extensions = {
            "Android": ('.java', '.kt', '.xml'),
            "Python": ('.py', '.txt'),
            "React": ('.js', '.jsx', '.ts', '.tsx'),
            "Flutter": ('.dart',)
        }

    def set_language(self, language):
        self.current_language = language
        self.filter_items()

    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event: QDragMoveEvent):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.DropAction.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.DropAction.CopyAction)
            event.accept()
            dropped_files = []
            for url in event.mimeData().urls():
                path = url.toLocalFile()
                dropped_files.extend(self.process_dropped_path(path))

            if not dropped_files:
                QMessageBox.warning(self, "No Matching Files",
                                    f"No files matching the current language ({self.current_language}) were found in the dropped items.\n\n"
                                    f"Accepted extensions: {', '.join(self.language_extensions[self.current_language])}")
        else:
            event.ignore()

    def process_dropped_path(self, path):
        dropped_files = []
        if os.path.isfile(path):
            if self.check_file_extension(path):
                if self.add_file(path):
                    dropped_files.append(path)
        elif os.path.isdir(path):
            for root, _, files in os.walk(path):
                for file in files:
                    file_path = os.path.join(root, file)
                    if self.check_file_extension(file_path):
                        if self.add_file(file_path):
                            dropped_files.append(file_path)
        return dropped_files

    def check_file_extension(self, path):
        return path.endswith(self.language_extensions[self.current_language])

    def add_file(self, path):
        if path not in [self.item(i).text() for i in range(self.count())]:
            self.addItem(path)
            return True
        return False

    def filter_items(self):
        for i in range(self.count() - 1, -1, -1):
            item = self.item(i)
            if not self.check_file_extension(item.text()):
                self.takeItem(i)

    def keyPressEvent(self, event: QKeyEvent):
        if event.key() == Qt.Key.Key_Delete:
            self.delete_selected_items()
        else:
            super().keyPressEvent(event)

    def delete_selected_items(self):
        for item in self.selectedItems():
            self.takeItem(self.row(item))
```


# File: ui\left_panel.py
```

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QListWidget, QTextEdit, QFrame)
from PyQt6.QtCore import pyqtSignal, Qt, QPropertyAnimation, QEasingCurve, QSize
from PyQt6.QtGui import QFont, QColor
from core.file_processor import FileProcessor
from core.masking_rules import MaskingRules
from config import SUPPORTED_LANGUAGES, OUTPUT_FOLDER
from ui.animated_button import AnimatedButton
from ui.animated_combo_box import AnimatedComboBox
from ui.file_list_widget import FileListWidget
from ui.rule_preview_widget import RulePreviewWidget

class LeftPanel(QWidget):
    language_changed = pyqtSignal(str)
    generate_clicked = pyqtSignal(list, list, str, MaskingRules)

    def __init__(self):
        super().__init__()
        self.file_processor = FileProcessor()
        self.masking_rules = MaskingRules()
        self.init_ui()

    def on_language_changed(self, language):
        self.file_processor.set_language_handler(language)
        self.language_changed.emit(language)
        self.file_list.clear()

    def on_generate_clicked(self):
        files = [self.file_list.item(i).text() for i in range(self.file_list.count())]
        if not files:
            return
        common_path = os.path.commonpath(files)
        relative_files = [os.path.relpath(f, common_path) for f in files]
        self.generate_clicked.emit(files, relative_files, OUTPUT_FOLDER, self.masking_rules)

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)  # Increased spacing between sections

        # Language selection
        lang_layout = self.create_section_layout("fa5s.code", "Language:")
        self.lang_combo = AnimatedComboBox()
        self.lang_combo.addItems(SUPPORTED_LANGUAGES)
        self.lang_combo.setFixedSize(200, 40)
        self.lang_combo.setFont(QFont("Arial", 12))
        self.lang_combo.currentTextChanged.connect(self.on_language_changed)
        lang_layout.addWidget(self.lang_combo)
        layout.addLayout(lang_layout)

        # File list
        file_layout = self.create_section_layout("fa5s.file-code", "Files:")
        layout.addLayout(file_layout)

        self.file_list = FileListWidget()
        self.file_list.setFixedHeight(200)
        self.file_list.setFont(QFont("Arial", 14))
        layout.addWidget(self.file_list)

        # Masking rules
        masking_layout = self.create_section_layout("fa5s.user-secret", "Masking Rules:")
        layout.addLayout(masking_layout)

        self.rule_preview = RulePreviewWidget(self.masking_rules)
        layout.addWidget(self.rule_preview)

        layout.addStretch()

        # Generate button
        self.generate_button = AnimatedButton("Prepare Code for Claude", "fa5s.cogs")
        self.generate_button.setFixedHeight(50)
        self.generate_button.clicked.connect(self.on_generate_clicked)
        layout.addWidget(self.generate_button)

        self.setStyleSheet("""
            QWidget {
                background-color: #282c34;
            }
            QLabel {
                color: #abb2bf;
            }
            QComboBox, QListWidget, QTextEdit {
                background-color: #2c313c;
                color: #abb2bf;
                border-radius: 10px;
                border: 1px solid #3a3f4b;
                padding: 10px;
            }
            QComboBox::drop-down {
                border: none;
                padding: 10px;
            }
            QComboBox QAbstractItemView {
                background-color: #2c313c;
                color: #abb2bf;
                border: 1px solid #3a3f4b;
                border-radius: 10px;
                padding: 10px;
                selection-background-color: #61afef;
                selection-color: #282c34;
            }
            QComboBox QAbstractItemView::item {
                min-height: 40px;
            }
            QComboBox {
                background-color: #2c313c;
                color: #abb2bf;
                border-radius: 5px;
                border: 1px solid #3a3f4b;
                padding: 5px 10px;
            }
            QComboBox::drop-down {
                border: none;
                padding-right: 10px;
            }
            QComboBox QAbstractItemView {
                background-color: #2c313c;
                color: #abb2bf;
                border: 1px solid #3a3f4b;
                selection-background-color: #61afef;
                selection-color: #282c34;
            }
        """)

    def create_section_layout(self, icon_name, label_text):
        section_layout = QHBoxLayout()
        section_layout.setSpacing(10)  # This controls horizontal spacing within the section header
        section_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        icon = QLabel()
        icon.setPixmap(qta.icon(icon_name, color='#abb2bf').pixmap(24, 24))
        section_layout.addWidget(icon)
        label = QLabel(label_text)
        label.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        section_layout.addWidget(label)
        section_layout.addStretch()
        return section_layout
```


# File: ui\main_window.py
```

from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QFrame, QSplitter, QPushButton, QMessageBox, QSizePolicy)
from PyQt6.QtCore import Qt, QPoint
from PyQt6.QtGui import QFont, QIcon
from .left_panel import LeftPanel
from .prompt_manager import PromptManager

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__(None, Qt.WindowType.FramelessWindowHint)
        self.setWindowTitle("CodePrep 2024")
        self.setGeometry(100, 100, 1400, 900)
        self.init_ui()
        self.draggable = False
        self.offset = QPoint()

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)

        # Custom title bar
        title_bar = QFrame()
        title_bar.setStyleSheet("background-color: #1e2127; color: white;")
        title_bar.setFixedHeight(40)
        title_layout = QHBoxLayout(title_bar)
        title_layout.setContentsMargins(10, 0, 10, 0)
        title_label = QLabel("CodePrep 2024")
        title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        title_layout.addWidget(title_label)
        title_layout.addStretch()

        for icon_name, slot in [("window-minimize", self.showMinimized),
                                ("window-maximize", self.toggle_maximize),
                                ("window-close", self.close)]:
            button = QPushButton(qta.icon(f'fa5s.{icon_name}'), "")
            button.setFixedSize(30, 30)
            button.clicked.connect(slot)
            button.setStyleSheet("""
                QPushButton {
                    background-color: transparent;
                    border: none;
                }
                QPushButton:hover {
                    background-color: #4a4f5b;
                }
            """)
            title_layout.addWidget(button)

        main_layout.addWidget(title_bar)

        # Main content area
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(20)

        splitter = QSplitter(Qt.Orientation.Horizontal)
        self.left_panel = LeftPanel()
        self.left_panel.generate_clicked.connect(self.generate_code)  # Connect the signal
        self.left_panel.language_changed.connect(self.left_panel.file_list.set_language)
        self.right_panel = PromptManager()

        # Create wrapper widgets for left and right panels
        left_wrapper = QWidget()
        left_layout = QVBoxLayout(left_wrapper)
        left_layout.setContentsMargins(0, 0, 10, 0)  # Add right margin
        left_layout.addWidget(self.left_panel)

        right_wrapper = QWidget()
        right_layout = QVBoxLayout(right_wrapper)
        right_layout.setContentsMargins(10, 0, 0, 0)  # Add left margin
        right_layout.addWidget(self.right_panel)
        right_wrapper.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
     
        splitter.addWidget(left_wrapper)
        splitter.addWidget(right_wrapper)
        splitter.setSizes([int(self.width() * 0.6), int(self.width() * 0.4)])
        splitter.setHandleWidth(1)
        splitter.setStyleSheet("""
            QSplitter::handle {
                background-color: #3a3f4b;
            }
        """)

        content_layout.addWidget(splitter)
        main_layout.addWidget(content_widget)

        self.setStyleSheet("""
            QMainWindow, QWidget {
                background-color: #282c34;
                color: #abb2bf;
                font-size: 16px;
            }
            QFrame {
                border: none;
            }
        """)

    def toggle_maximize(self):
        if self.isMaximized():
            self.showNormal()
        else:
            self.showMaximized()

    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton and event.position().y() < 40:
            self.draggable = True
            self.offset = event.position()

    def mouseMoveEvent(self, event):
        if self.draggable and event.buttons() & Qt.MouseButton.LeftButton:
            self.move(self.pos() + event.position().toPoint() - self.offset.toPoint())

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            self.draggable = False

    def generate_code(self, files, relative_files, output_folder, masking_rules):
        try:
            output_files = self.left_panel.file_processor.process_files(files, relative_files, output_folder,
                                                                        masking_rules)

            if output_files:
                success_message = "Files generated successfully:\n" + "\n".join(output_files)
                QMessageBox.information(self, "Success", success_message)
                logging.info(f"Generated files: {output_files}")
            else:
                QMessageBox.warning(self, "Warning",
                                    "No files were generated. This may be due to an unexpected error or mismatched file types.")
                logging.warning("No files were generated")
        except Exception as e:
            error_message = f"Failed to generate files: {str(e)}"
            QMessageBox.critical(self, "Error", error_message)
            logging.error(error_message)
```


# File: ui\prompt_card.py
```
from PyQt6.QtCore import Qt, pyqtSignal, QSize
from PyQt6.QtGui import QColor, QIcon, QGuiApplication
from PyQt6.QtWidgets import QGraphicsDropShadowEffect, QFrame, QLabel, QVBoxLayout, QPushButton, QHBoxLayout

class PromptCard(QFrame):
    edit_requested = pyqtSignal(str)
    deleted = pyqtSignal(str)

    def __init__(self, prompt_id, tag, content):
        super().__init__()
        self.prompt_id = prompt_id
        self.tag = tag
        self.content = content
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        tag_label = QLabel(self.tag)
        tag_label.setStyleSheet("""
            background-color: #61afef;
            color: #282c34;
            padding: 5px 10px;
            border-radius: 10px;
            font-weight: bold;
            font-size: 14px;
        """)
        tag_label.setFixedHeight(30)
        tag_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(tag_label, alignment=Qt.AlignmentFlag.AlignLeft)

        content_preview = self.content[:200] + "..." if len(self.content) > 100 else self.content
        content_label = QLabel(content_preview)
        content_label.setStyleSheet("""
            color: #abb2bf;
            font-size: 16px;
            padding: 10px;
            background-color: #3a3f4b;
            border-radius: 8px;
        """)
        content_label.setWordWrap(True)
        layout.addWidget(content_label)

        button_layout = QHBoxLayout()
        edit_button = QPushButton(qta.icon('fa5s.edit'), "Edit")
        delete_button = QPushButton(qta.icon('fa5s.trash'), "Delete")
        copy_button = QPushButton(qta.icon('fa5s.copy'), "Copy")
        for button in (edit_button, delete_button, copy_button):
            button.setStyleSheet("""
                QPushButton {
                    background-color: #3a3f4b;
                    color: #abb2bf;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    font-size: 14px;
                }
                QPushButton:hover {
                    background-color: #4a4f5b;
                }
            """)
            button.setIconSize(QSize(20, 20))
        edit_button.clicked.connect(lambda: self.edit_requested.emit(self.prompt_id))
        delete_button.clicked.connect(lambda: self.deleted.emit(self.prompt_id))
        copy_button.clicked.connect(self.copy_content)
        button_layout.addWidget(edit_button)
        button_layout.addWidget(delete_button)
        button_layout.addWidget(copy_button)
        button_layout.addStretch()
        layout.addLayout(button_layout)

        self.setStyleSheet("""
            PromptCard {
                background-color: #2c313c;
                border-radius: 10px;
                border: 1px solid #3a3f4b;
            }
        """)
        # Add shadow effect
        self.setGraphicsEffect(self.create_shadow())

    def create_shadow(self):
        shadow = QGraphicsDropShadowEffect(self)
        shadow.setBlurRadius(15)
        shadow.setXOffset(0)
        shadow.setYOffset(5)
        shadow.setColor(QColor(0, 0, 0, 80))
        return shadow

    def copy_content(self):
        clipboard = QGuiApplication.clipboard()
        clipboard.setText(self.content)
        
```


# File: ui\prompt_dialog.py
```
from PyQt6.QtWidgets import (QDialog, QVBoxLayout, QLabel, QLineEdit, QTextEdit,
                             QDialogButtonBox, QFrame)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont

class PromptDialog(QDialog):
    def __init__(self, tag="", content=""):
        super().__init__()
        self.setWindowTitle("Add/Edit Prompt")
        self.tag = tag
        self.content = content
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # Tag input
        tag_label = QLabel("Tag:")
        tag_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        self.tag_input = QLineEdit(self.tag)
        self.tag_input.setPlaceholderText("Enter tag")
        self.tag_input.setFont(QFont("Arial", 14))
        layout.addWidget(tag_label)
        layout.addWidget(self.tag_input)

        # Content input
        content_label = QLabel("Content:")
        content_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        self.content_input = QTextEdit(self.content)
        self.content_input.setPlaceholderText("Enter content")
        self.content_input.setFont(QFont("Arial", 14))
        layout.addWidget(content_label)
        layout.addWidget(self.content_input)

        # Buttons
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(self.accept)
        button_box.rejected.connect(self.reject)
        layout.addWidget(button_box)

        self.setStyleSheet("""
            QDialog {
                background-color: #282c34;
                color: #abb2bf;
            }
            QLabel {
                color: #e5c07b;
            }
            QLineEdit, QTextEdit {
                background-color: #3a3f4b;
                color: #abb2bf;
                border: 1px solid #5c6370;
                border-radius: 4px;
                padding: 8px;
                font-size: 14px;
            }
            QPushButton {background-color: #61afef;
                color: #282c34;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #56b6c2;
            }
        """)

    def get_prompt(self):
        return self.tag_input.text(), self.content_input.toPlainText()
```


# File: ui\prompt_manager.py
```
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QScrollArea,
                             QLabel, QFrame, QHBoxLayout, QSizePolicy)
from PyQt6.QtCore import Qt, QPropertyAnimation, QEasingCurve, QSize
from PyQt6.QtGui import QFont, QColor
from .prompt_card import PromptCard
from .prompt_dialog import PromptDialog
from data.database import db
from ui.animated_button import AnimatedButton

class PromptManager(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()

    def load_prompts(self):
        prompts = db.get_all_prompts()
        for prompt in prompts:
            self.add_prompt_card(str(prompt['_id']), prompt['tag'], prompt['content'])
    def add_prompt(self):
        dialog = PromptDialog()
        if dialog.exec():
            tag, content = dialog.get_prompt()
            prompt_id = db.add_prompt(tag, content)
            self.add_prompt_card(str(prompt_id), tag, content)

    def add_prompt_card(self, prompt_id, tag, content):
        card = PromptCard(prompt_id, tag, content)
        card.edit_requested.connect(self.edit_prompt)
        card.deleted.connect(self.delete_prompt)
        self.scroll_layout.addWidget(card)

    def edit_prompt(self, prompt_id):
        prompt = db.get_prompt(prompt_id)
        if prompt:
            dialog = PromptDialog(prompt['tag'], prompt['content'])
            if dialog.exec():
                new_tag, new_content = dialog.get_prompt()
                db.update_prompt(prompt_id, new_tag, new_content)
                self.refresh_prompts()

    def delete_prompt(self, prompt_id):
        db.delete_prompt(prompt_id)
        self.refresh_prompts()

    def refresh_prompts(self):
        for i in reversed(range(self.scroll_layout.count())):
            self.scroll_layout.itemAt(i).widget().setParent(None)
        self.load_prompts()

    def init_ui(self):
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # Header
        header_label = QLabel("Prompts")
        header_label.setFont(QFont("Arial", 24, QFont.Weight.Bold))
        main_layout.addWidget(header_label)

        # Content widget (scroll area + button)
        content_widget = QWidget()
        content_layout = QVBoxLayout(content_widget)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.setSpacing(20)

        # Scroll area for cards
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)
        scroll_content = QWidget()
        self.scroll_layout = QVBoxLayout(scroll_content)
        self.scroll_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.scroll_layout.setContentsMargins(0, 0, 0, 0)
        self.scroll_layout.setSpacing(15)
        scroll_area.setWidget(scroll_content)
        content_layout.addWidget(scroll_area, 1)  # Set stretch factor to 1

        # Add new card button
        self.add_button = AnimatedButton("Add new prompt", "fa5s.plus")
        self.add_button.setFixedHeight(50)
        self.add_button.clicked.connect(self.add_prompt)
        content_layout.addWidget(self.add_button)

        main_layout.addWidget(content_widget, 1)  # Add content widget with stretch

        self.setStyleSheet("""
            QWidget {
                background-color: #282c34;
            }
            QLabel {
                color: #abb2bf;
            }
        """)

        self.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        self.load_prompts()
        
```


# File: ui\rule_preview_widget.py
```
from PyQt6.QtWidgets import QTextEdit
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QDropEvent

class RulePreviewWidget(QTextEdit):
    def __init__(self, masking_rules):
        super().__init__()
        self.masking_rules = masking_rules
        self.setAcceptDrops(True)
        self.setReadOnly(True)

    def dragEnterEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.DropAction.CopyAction)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.DropAction.CopyAction)
            event.accept()
            for url in event.mimeData().urls():
                file_path = url.toLocalFile()
                if file_path.endswith('.txt'):
                    self.load_masking_rules(file_path)
                    break
        else:
            event.ignore()

    def load_masking_rules(self, file_path):
        self.masking_rules.load_from_file(file_path)
        self.update_preview()

    def update_preview(self):
        self.setText("\n".join([f"{original} -> {masked}" for original, masked in self.masking_rules.rules]))
```


# File: ui\styles.py
```
from PyQt6.QtGui import QColor, QPalette
from PyQt6.QtWidgets import QApplication

def set_dark_theme(app):
    dark_palette = QPalette()
    dark_palette.setColor(QPalette.ColorRole.Window, QColor(40, 44, 52))
    dark_palette.setColor(QPalette.ColorRole.WindowText, QColor(171, 178, 191))
    dark_palette.setColor(QPalette.ColorRole.Base, QColor(58, 63, 75))
    dark_palette.setColor(QPalette.ColorRole.AlternateBase, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.ColorRole.ToolTipText, QColor(255, 255, 255))
    dark_palette.setColor(QPalette.ColorRole.Text, QColor(171, 178, 191))
    dark_palette.setColor(QPalette.ColorRole.Button, QColor(58, 63, 75))
    dark_palette.setColor(QPalette.ColorRole.ButtonText, QColor(171, 178, 191))
    dark_palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
    dark_palette.setColor(QPalette.ColorRole.Link, QColor(97, 175, 239))
    dark_palette.setColor(QPalette.ColorRole.Highlight, QColor(97, 175, 239))
    dark_palette.setColor(QPalette.ColorRole.HighlightedText, QColor(40, 44, 52))
    app.setPalette(dark_palette)
    app.setStyleSheet("QToolTip { color: #ffffff; background-color: #2a82da; border: 1px solid white; }")

```


# File: utils\file_utils.py
```

def get_common_path(paths):
    return os.path.commonpath(paths)

def get_relative_path(path, base_path):
    return os.path.relpath(path, base_path)

def read_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()
```


# File: config.py
```
from dotenv import load_dotenv

# Load .env file
load_dotenv()

MONGODB_URI = os.getenv('MONGODB_URI')
if not MONGODB_URI:
    raise ValueError("MONGODB_URI environment variable is not set. Please check your .env file.")

OUTPUT_FOLDER = "output"
SUPPORTED_LANGUAGES = ["Python", "Android", "React", "Flutter"]
```


# File: main.py
```

from PyQt6.QtWidgets import QApplication
from ui.main_window import MainWindow
from ui.styles import set_dark_theme
from dotenv import load_dotenv

def main():
    # Load .env file from the project root
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
    load_dotenv(dotenv_path)

    app = QApplication(sys.argv)
    set_dark_theme(app)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    main()
```


# File: core\file_processor.py
```
from core.language_handlers import get_language_handler, PythonHandler
from utils.file_utils import read_file

class FileProcessor:
    def __init__(self):
        self.language_handler = PythonHandler()

    def set_language_handler(self, language):
        self.language_handler = get_language_handler(language)

    def read_file(self, file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    def process_files(self, files, relative_files, output_folder, masking_rules):
        if not self.language_handler:
            raise ValueError("Language handler not set")

        output_files = self.language_handler.get_output_files(output_folder)
        generated_files = set()

        for file_path, relative_path in zip(files, relative_files):
            content = read_file(file_path)
            if masking_rules and masking_rules.rules:
                content = masking_rules.apply_masking(content)
            processed_content = self.language_handler.process_content(content)
            file_type = self.language_handler.write_to_output(output_files, relative_path, processed_content)
            if file_type and file_type in output_files:
                generated_files.add(output_files[file_type])

        return list(generated_files)
    
```


# File: core\masking_rules.py
```
class MaskingRules:
    def __init__(self):
        self.rules = []

    def load_from_file(self, file_path):
        self.rules = []
        with open(file_path, 'r') as file:
            for line in file:
                parts = line.strip().split('->')
                if len(parts) == 2:
                    original = parts[0].strip()
                    masked = parts[1].strip()
                    self.rules.append((original, masked))

    def apply_masking(self, content):
        for original, masked in self.rules:
            content = content.replace(original, masked)
        return content
```


# File: core\__init__.py
```

```


# File: core\language_handlers\android_handler.py
```
from .base_handler import BaseLanguageHandler

class AndroidHandler(BaseLanguageHandler):
    def get_output_files(self, output_folder):
        return {
            'code': self._create_output_file(output_folder, "android_code"),
            'xml': self._create_output_file(output_folder, "android_xml")
        }

    def process_content(self, content):
        lines = content.split('\n')
        return '\n'.join([line for line in lines if not line.strip().startswith(('package', 'import'))])

    def write_to_output(self, output_files, relative_path, content):
        if relative_path.endswith(('.kt', '.java')):
            self._write_to_file(output_files['code'], relative_path, content)
            return 'code'
        elif relative_path.endswith('.xml'):
            self._write_to_file(output_files['xml'], relative_path, content)
            return 'xml'
        return None
```


# File: core\language_handlers\base_handler.py
```
from abc import ABC, abstractmethod
from datetime import datetime

class BaseLanguageHandler(ABC):
    @abstractmethod
    def get_output_files(self, output_folder):
        pass

    @abstractmethod
    def process_content(self, content):
        pass

    @abstractmethod
    def write_to_output(self, output_files, relative_path, content):
        pass

    def _get_timestamp(self):
        return datetime.now().strftime("%Y%m%d_%H%M%S")

    def _create_output_file(self, output_folder, prefix):
        timestamp = self._get_timestamp()
        return os.path.join(output_folder, f"{prefix}_{timestamp}.txt")

    def _write_to_file(self, file_path, relative_path, content):
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'a', encoding='utf-8') as f:
            f.write(f"\n\n# File: {relative_path}\n")
            f.write("```\n")
            f.write(content)
            f.write("\n```\n")
```


# File: core\language_handlers\flutter_handler.py
```
from .base_handler import BaseLanguageHandler

class FlutterHandler(BaseLanguageHandler):
    def get_output_files(self, output_folder):
        return {'flutter': self._create_output_file(output_folder, "flutter_code")}

    def process_content(self, content):
        # Add Flutter-specific processing here if needed
        return content

    def write_to_output(self, output_files, relative_path, content):
        self._write_to_file(output_files['flutter'], relative_path, content)
        return 'flutter'
```


# File: core\language_handlers\python_handler.py
```
from .base_handler import BaseLanguageHandler

class PythonHandler(BaseLanguageHandler):
    def get_output_files(self, output_folder):
        return {'python': self._create_output_file(output_folder, "python_code")}

    def process_content(self, content):
        lines = content.split('\n')
        return '\n'.join([line for line in lines if not line.strip().startswith('import')])

    def write_to_output(self, output_files, relative_path, content):
        self._write_to_file(output_files['python'], relative_path, content)
        return 'python'
```


# File: core\language_handlers\react_handler.py
```
from .base_handler import BaseLanguageHandler

class ReactHandler(BaseLanguageHandler):
    def get_output_files(self, output_folder):
        return {'react': self._create_output_file(output_folder, "react_code")}

    def process_content(self, content):
        # Add React-specific processing here if needed
        return content

    def write_to_output(self, output_files, relative_path, content):
        self._write_to_file(output_files['react'], relative_path, content)
        return 'react'
```


# File: core\language_handlers\__init__.py
```
from .android_handler import AndroidHandler
from .python_handler import PythonHandler
from .react_handler import ReactHandler
from .flutter_handler import FlutterHandler

def get_language_handler(language):
    handlers = {
        "Android": AndroidHandler,
        "Python": PythonHandler,
        "React": ReactHandler,
        "Flutter": FlutterHandler
    }
    handler_class = handlers.get(language)
    if handler_class:
        return handler_class()
    else:
        raise ValueError(f"Unsupported language: {language}")
```
